from typing import Any, Iterable, TypeVar, Union, Dict, Type
from typing_extensions import Self

T = TypeVar("T")
E = Union[T, Any]

_d = {}
dict_items = type(_d.items())
dict_keys = type(_d.keys())
dict_values = type(_d.values())

Element = Dict[str, T] | Iterable[Iterable] | None

class AttrDict(Dict[str, E]):
    def __init__(self, seq: Element[E] = None, **kwargs: E) -> None: ...
    def clear(self) -> Self: ...
    def copy(self) -> AttrDict[E]: ...
    @staticmethod
    def fromkeys(iterable: Iterable[str], values: E | None = None, **_kwargs: Any) -> AttrDict[E]: ...
    def get(self, key: str, default: E | None = None) -> E: ...
    def items(self) -> dict_items[str, E]: ...
    def keys(self) -> dict_keys[str]: ...
    def pop(self, key: str, default: E | None = None) -> E: ...
    def popitem(self) -> tuple[str, E]: ...
    def setdefault(self, key: str, default: E | None = None) -> E: ...
    def update(self, seq: Element[E] = None, **kwargs: E) -> Self: ...
    def values(self) -> dict_values[E]: ...
    def __contains__(self, key: str) -> bool: ...
    def __delitem__(self, key: str) -> None: ...
    def __setattr__(self, key: str, value: E) -> None: ...
    def __getattr__(self, key: str) -> E: ...
    def __setitem__(self, key: str, value: E) -> None: ...
    def __getitem__(self, key: str) -> E: ...
    def __dir__(self) -> Iterable[str]: ...

def attrify(seq: Element[T] = None, **kwargs: T) -> AttrDict[T]: ...

attrdict = Type[AttrDict]
