"""Update Log

2023.10.08:
    - added type hints on accessor
"""

import abc
from abc import ABC, abstractmethod
from pycinante.io.utils import PathType
from typing import Any, Callable, Generic, TypeVar, List

T = TypeVar("T")

class FileAccessor(ABC, Generic[T], metaclass=abc.ABCMeta):
    supported_types: List[str]
    @property
    @abstractmethod
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    @abstractmethod
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...
    @property
    def order(self) -> int: ...
    def load(self, path: PathType, **kwargs: Any) -> T: ...
    def dump(self, obj: T, path: PathType, **kwargs: Any) -> None: ...

def load_text(path: PathType, **kwargs: Any) -> str: ...

def dump_text(obj: str, path: PathType, **kwargs: Any) -> None: ...

class TextFileAccessor(FileAccessor[str]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_bytes(path: PathType, **kwargs: Any) -> bytes: ...

def dump_bytes(obj: bytes, path: PathType, **kwargs: Any) -> None: ...

class BytesFileAccessor(FileAccessor[bytes]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...
    @property
    def order(self) -> int: ...

def load_json(path: PathType, **kwargs: Any) -> Any: ...

def dump_json(obj: Any, path: PathType, **kwargs: Any) -> None: ...

class JsonFileAccessor(FileAccessor[Any]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_pickle(path: PathType, **kwargs: Any) -> Any: ...

def dump_pickle(obj: Any, path: PathType, **kwargs: Any) -> None: ...

class PickleFileAccessor(FileAccessor[Any]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_cv2(path: PathType, **kwargs: Any) -> "numpy.ndarray": ...

def dump_cv2(obj: "numpy.ndarray", path: PathType, **kwargs: Any) -> None: ...

class OpenCVImageFileAccessor(FileAccessor['numpy.ndarray']):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...
    @property
    def order(self) -> int: ...

def load_pil(path: PathType, **kwargs: Any) -> "PIL.Image": ...

def dump_pil(obj: "PIL.Image", path: PathType, **kwargs: Any) -> None: ...

class PILImageFileAccessor(FileAccessor['PIL.Image']):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_csv(path: PathType, **kwargs: Any) -> "pandas.DataFrame": ...

def dump_csv(obj: "pandas.DataFrame", path: PathType, **kwargs: Any) -> None: ...

class CsvFileAccessor(FileAccessor['pandas.DataFrame']):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_excel(path: PathType, **kwargs: Any) -> "pandas.DataFrame": ...

def dump_excel(obj: "pandas.DataFrame", path: PathType, **kwargs: Any) -> None: ...

class XlsxFileAccessor(FileAccessor['pandas.DataFrame']):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_numpy(path: PathType, **kwargs: Any) -> "numpy.ndarray": ...

def dump_numpy(obj: "numpy.ndarray", path: PathType, **kwargs: Any) -> None: ...

class NumpyFileAccessor(FileAccessor['numpy.ndarray']):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_torch(path: PathType, **kwargs: Any) -> "torch.Tensor": ...

def dump_torch(obj: "torch.Tensor", path: PathType, **kwargs: Any) -> None: ...

class TorchFileAccessor(FileAccessor['torch.Tensor']):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def extract_archive(src: PathType, dst: PathType, **kwargs: Any): ...

class ArchiveFileAccessor(FileAccessor[None]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...
    def extract(self, src: PathType, dst: PathType, **kwargs: Any) -> None: ...

def load_yaml(path: PathType, **_kwargs: Any) -> Any: ...

def dump_yaml(obj: Any, path: PathType, **kwargs: Any) -> None: ...

class YamlFileAccessor(FileAccessor[Any]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_toml(path: PathType, **kwargs: Any) -> Any: ...

def dump_toml(obj: Any, path: PathType, **kwargs: Any) -> None: ...

class TomlFileAccessor(FileAccessor[Any]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_xml(path: PathType, **kwargs: Any) -> "ElementTree": ...

def dump_xml(obj: "ElementTree", path: PathType, **kwargs: Any) -> None: ...

class XmlFileAccessor(FileAccessor[Any]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_html(path: PathType, **kwargs: Any) -> "BeautifulSoup": ...

def dump_html(obj: "BeautifulSoup", path: PathType, **kwargs: Any) -> None: ...

class HtmlFileAccessor(FileAccessor[Any]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

def load_sound(path: PathType, **kwargs: Any) -> "numpy.ndarray": ...

def dump_sound(obj: "numpy.ndarray", path: PathType, **kwargs: Any) -> None: ...

class SoundFileAccessor(FileAccessor[Any]):
    supported_types: List[str]
    @property
    def loader(self) -> Callable[[PathType, Any], T]: ...
    @property
    def dumper(self) -> Callable[[T, PathType, Any], None]: ...

_file_accessors: List[FileAccessor]

def add_file_accessor(accessor: FileAccessor) -> None: ...

def match_file_accessor(ext: str, accessor_type: type[FileAccessor] | None = None) -> FileAccessor | None: ...
