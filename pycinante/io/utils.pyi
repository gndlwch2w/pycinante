from os import PathLike
from enum import Enum
from typing import Union, AnyStr, Any
from typing_extensions import TypeAlias, Protocol
from pycinante.misc.unit import uDefinition

PathType: TypeAlias = Union[AnyStr, PathLike]

class BinaryUnit(Enum):
    BIT: uDefinition[float] = ...
    BYTE: uDefinition[float] = ...
    KILO_BYTE: uDefinition[float] = ...
    MEGA_BYTE: uDefinition[float] = ...
    GIGA_BYTE: uDefinition[float] = ...
    TRILLION_BYTE: uDefinition[float] = ...
    PETA_BYTE: uDefinition[float] = ...
    EXA_BYTE: uDefinition[float] = ...
    ZETTA_BYTE: uDefinition[float] = ...
    YOTTA_BYTE: uDefinition[float] = ...
    BRONTO_BYTE: uDefinition[float] = ...

class BinaryUnitProtocol(Protocol):
    @property
    def value(self) -> float: ...
    def to_bit(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_kilo_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_mega_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_trillion_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_peta_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_exa_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_zetta_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_yotta_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...
    def to_bronto_byte(self, strify: bool = False, **kwargs: Any) -> float | str: ...

def get_ext(path: PathType) -> str: ...

def get_filename(path: PathType) -> str: ...
