from enum import Enum
from typing import Any, Generic, Iterable, TypeVar, List

T_co = TypeVar("T_co", covariant=True)

class uDefinition(Generic[T_co]):
    _name: str
    def __init__(self, name: str) -> None: ...
    @property
    def name(self) -> str: ...
    def n2u(self, value: T_co, **kwargs: Any) -> T_co: ...
    def u2n(self, value: T_co, **kwargs: Any) -> T_co: ...

def unitify(value: T_co, nunit: Enum, tunit: Enum, strify: bool = False, **kwargs: Any) -> T_co | str: ...

class uWrapper(Generic[T_co]):
    _value: T_co
    _nunit: Enum
    _new_method_names: List[str]
    def __init__(self, value: T_co, nunit: Enum) -> None: ...
    @property
    def value(self) -> T_co: ...
    def __dir__(self) -> Iterable[str]: ...

def number_as_udef(name: str, unit: float | None = None) -> uDefinition[float]: ...
